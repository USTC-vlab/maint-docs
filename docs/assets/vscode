#!/bin/sh

NAME='Vlab Visual Studio Code server'
UID="$(id -u)"
SERVICE_FILE=~/.config/systemd/user/code-server.service
SERVICE_DIR="$(dirname "$SERVICE_FILE")"
SERVICE_NAME="$(basename "$SERVICE_FILE")"

sudo_ok=""

test_sudo() {
  if [ -n "$sudo_ok" ]; then
    return "$sudo_ok"
  fi
  if sudo /bin/true; then
    sudo_ok=0
  else
    sudo_ok=1
  fi
}

is_root() {
  test "$UID" -eq 0
}

verbose_run() {
  echo "Running: $*"
  "$@"
}

write_service_file() {
  cat << EOF
[Unit]
Description=$NAME

[Service]
Type=simple
ExecStart=/opt/vlab/code-server/bin/code-server --auth=none --bind-addr=0.0.0.0:1024 --disable-telemetry
Restart=on-failure

Environment=SERVICE_URL=https://marketplace.visualstudio.com/_apis/public/gallery
Environment=ITEM_URL=https://marketplace.visualstudio.com/items

[Install]
WantedBy=default.target
EOF
}

write_firewall_rules() {
  if [ -e "/etc/centos-release" ]; then
    RULES4=/etc/sysconfig/iptables
    RULES6=/etc/sysconfig/ip6tables
  else
    RULES4=/etc/iptables/rules.v4
    RULES6=/etc/iptables/rules.v6
  fi
  cat << EOF
iptables -D INPUT ! -i lo ! -s 172.31.0.2 -p tcp --dport 1024 -j REJECT --reject-with tcp-reset >/dev/null 2>&1
iptables -I INPUT ! -i lo ! -s 172.31.0.2 -p tcp --dport 1024 -j REJECT --reject-with tcp-reset
ip6tables -D INPUT ! -i lo -p tcp --dport 1024 -j REJECT --reject-with tcp-reset >/dev/null 2>&1
ip6tables -I INPUT ! -i lo -p tcp --dport 1024 -j REJECT --reject-with tcp-reset
iptables-save > $RULES4
ip6tables-save > $RULES6
EOF
}

if [ -z "$XDG_RUNTIME_DIR" ]; then
  export XDG_RUNTIME_DIR="/run/user/$UID"
else
  # For unknown reasons it's better to override
  export XDG_RUNTIME_DIR="/run/user/$UID"
fi

# In certain cases it may be missing
if [ ! -d "$XDG_RUNTIME_DIR" ]; then
  sudo mkdir -p "$XDG_RUNTIME_DIR"
  sudo chown "$UID.$UID" "$XDG_RUNTIME_DIR"
fi

echo "$NAME manager"

# Not expecting root, use sudo
if is_root; then
  echo "[E] This installer script should NOT be run as root (or sudo). Please try again with a normal user."
  exit 1
fi

if ! command -v sudo >/dev/null; then
  echo "[E] No sudo command available. Please install sudo and try again."
  exit 1
fi

# Check systemd user instance
if ! systemctl is-active --quiet "user@$UID.service"; then
  echo "Systemd user instance for user $UID isn't running, attempting to start it"
  verbose_run sudo systemctl start "user@$UID.service"

  # Attempt to make user instance auto-start as well
  TARGET="/etc/systemd/system/multi-user.target.wants/user@$UID.service"
  if [ ! -e "$TARGET" ]; then
    sudo ln -s /lib/systemd/system/user@.service "/etc/systemd/system/multi-user.target.wants/user@$UID.service"
  fi
fi

# Process commands
case "$1" in
  ""|enable|start)
    mkdir -p "$SERVICE_DIR"
    if [ ! -e "$SERVICE_FILE" ]; then
      echo "Service file doesn't exist, creating"
      write_service_file > "$SERVICE_FILE"
      verbose_run systemctl --user enable "$SERVICE_NAME"
    fi

    # Create symlink for real VSCode
    if [ ! -d "$HOME/.config/Code" ]; then
      ln -s "$HOME/.local/share/code-server" "$HOME/.config/Code"
    fi

    # Insert firewall rules if not exist
    echo "Securing server port"
    write_firewall_rules | sudo sh -

    echo "Starting $NAME"
    verbose_run systemctl --user start "$SERVICE_NAME"
    if [ $? -ne 0 ]; then
      echo "Something went wrong, please try again later. If this problem persists, please report it to Vlab."
    fi
    ;;
  stop)
    echo "Stopping $NAME"
    verbose_run systemctl --user stop "$SERVICE_NAME"
    if [ $? -ne 0 ]; then
      # Try again
      verbose_run systemctl --user kill "$SERVICE_NAME"
    fi
    verbose_run systemctl --user disable "$SERVICE_NAME"
    ;;
  restart)
    echo "Restarting $NAME"
    write_firewall_rules | sudo sh - 2>/dev/null
    verbose_run systemctl --user restart "$SERVICE_NAME"
    if [ $? -ne 0 ]; then
      echo "Something went wrong, please try again later. If this problem persists, please report it to Vlab."
    fi
    ;;
  disable)
    echo "Disabling $NAME"
    "$0" stop
    echo "Removing service file"
    rm -f "$SERVICE_FILE"
    ;;
  *)
    echo "Unknown command '$1'"
    exit 1
    ;;
esac
exit 0
